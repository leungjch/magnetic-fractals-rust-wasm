/* tslint:disable */
/* eslint-disable */
export function greet(): void;
export function sum_of_squares(a: number, b: number): number;
export function __wbg_vec2d_free(a: number): void;
export function __wbg_get_vec2d_x(a: number): number;
export function __wbg_set_vec2d_x(a: number, b: number): void;
export function __wbg_get_vec2d_y(a: number): number;
export function __wbg_set_vec2d_y(a: number, b: number): void;
export function vec2d_new(a: number, b: number): number;
export function vec2d_magnitude(a: number): number;
export function vec2d_zero(): number;
export function vec2d_convert_coords(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_rgb_free(a: number): void;
export function rgb_new(a: number, b: number, c: number): number;
export function rgb_size_of(): number;
export function rgb_mix_pastel(a: number): number;
export function rgb_mix_blacken(a: number): number;
export function rgb_random_pastel(): number;
export function __wbg_universe_free(a: number): void;
export function universe_new(a: number, b: number, c: number): number;
export function universe_add_magnet(a: number, b: number): void;
export function universe_add_nums(a: number, b: number): void;
export function universe_create_magnet(a: number, b: number, c: number, d: number, e: number): void;
export function universe_create_pendulum(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_create_emitter(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function universe_get_num(a: number, b: number): number;
export function universe_clear_magnets(a: number): void;
export function universe_add_pendulum(a: number, b: number): void;
export function universe_clear_pendulums(a: number): void;
export function universe_clear_emitters(a: number): void;
export function universe_tick(a: number): void;
export function universe_width(a: number): number;
export function universe_height(a: number): number;
export function universe_pendulums(a: number): number;
export function universe_magnets(a: number): number;
export function universe_nums(a: number): number;
export function universe_pendulums_len(a: number): number;
export function universe_magnets_len(a: number): number;
export function universe_set_steps(a: number, b: number): void;
export function universe_set_delta(a: number, b: number): void;
export function __wbg_magnet_free(a: number): void;
export function magnet_new(a: number, b: number, c: number): number;
export function magnet_size_of(): number;
export function __wbg_pendulum_free(a: number): void;
export function pendulum_new(a: number, b: number, c: number, d: number): number;
export function pendulum_size_of(): number;
export function pendulum_pos(a: number): number;
export function __wbg_emitter_free(a: number): void;
export function __wbg_get_emitter_clock(a: number): number;
export function __wbg_set_emitter_clock(a: number, b: number): void;
export function __wbg_get_emitter_tension(a: number): number;
export function __wbg_set_emitter_tension(a: number, b: number): void;
export function __wbg_get_emitter_friction(a: number): number;
export function __wbg_set_emitter_friction(a: number, b: number): void;
export function __wbg_get_emitter_mass(a: number): number;
export function __wbg_set_emitter_mass(a: number, b: number): void;
export function emitter_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function emitter_tick(a: number): void;
export function __wbg_fractalgenerator_free(a: number): void;
export function generate_fractal(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function fractalgenerator_new(a: number, b: number): number;
export function fractalgenerator_get_width(a: number): number;
export function fractalgenerator_get_height(a: number): number;
export function fractalgenerator_generate(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_wbg_rayon_poolbuilder_free(a: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number): number;
export function wbg_rayon_start_worker(a: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_thread_destroy(): void;
export function __wbindgen_start(): void;
